1)

def to_ounces(grams: float = 0) -> float:
    return 28.3495231 * grams

print(to_ounces(25))
-------------------------
2)
def to_centigrade(F: int) -> int:
    return (5 / 9) * (F - 32)

print(to_centigrade(320))
------------------------
3)
def solve(numheads: int, numlegs: int) -> str:
    if numheads >= numlegs or numlegs % 2 == 1:
        return 'No solution'
    if numheads * 4 > numlegs and numheads * 2 > numlegs:
        return 'you have really interesting farm'
    
    rabbit = 0
    chicken = 0
    while (numlegs - numheads * 2 != 0):
        rabbit += 1
        numheads -= 1
        numlegs -= 4
        
    chicken = numheads
    
    return f'rabbit : {rabbit} chicken : {chicken}'

print(solve(4, 12))    
---------------------------------
4)

def only_prime_numbers(numbers: str) -> list:
    return [i for i in list(map(int, numbers.split())) if len([j for j in range(2, i) if i % j == 0]) == 0 and i > 1]

print(only_prime_numbers('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'))

---------------------------------
5)
from itertools import permutations

def permutation(word: str) -> str:
    return (''.join(_) for _ in permutations(word))

print(list(permutation('')))
-----------------------------------
6)
reverse_words = lambda word: [_ for _ in list(word.split())[::-1]]
print(' '.join(reverse_words('we are using the python')))

---------------------------------------
7)
def has_33(nums: list) -> bool:
    for index_of_nums in range(len(nums) - 1):
        if nums[index_of_nums] == nums[index_of_nums + 1] == 3:
            return True
    
    return False

print(has_33([1, 3, 3]))
print(has_33([1, 3, 1, 3]))
print(has_33([3, 1, 3]) )
---------------------------------------
8)
def spy_game(nums: list) -> bool:
    need_numbers, index = [0, 0, 7], 0
    
    for index_of_nums in range(len(nums)):
        if need_numbers[index] == nums[index_of_nums]:
            index += 1
        if index == 3:
            return True
    
    return False

print(spy_game([1,2,4,0,0,7,5]))
print(spy_game([1,0,2,4,0,5,7]))
print(spy_game([1,7,2,0,4,5,0])) 
---------------------------------------
9)
from math import pi

radius_of_sphere = lambda r: (4/3) * (pi * r**3)

print(radius_of_sphere(2))
------------------------------------------
10)
def unique(nums: list) -> list:
    hash_table = {}
    for _ in nums:
        hash_table[_] = 1

    return [key for key, value in hash_table.items()]

print(unique([1, 2, 3, 2, 1, 3, 1]))

-----------------------------------------
11)
def IsPalindrome(word: str) -> bool:
    return True if word[::-1] == word else False

print(IsPalindrome('madam'))
------------------------------------
12)
def histogram(numbers: list) -> None:
    for num in numbers:
        print('*' * num)

histogram([1, 2, 3, 4, 5, 10])
------------------------------------------
13)
from random import randint

def guess_the_number():
    name = input('Hello! What is your name?\n')
    user_answer = None
    guesses_count = 0

    last_range = randint(20, 100)
    print(f'Well, {name}, I am thinking of a number between 1 and {last_range}.')

    random_number = randint(1, last_range)
    while user_answer != random_number:
        user_answer = int(input('Take a guess.\n'))
        guesses_count += 1

        if user_answer < random_number: print('Your guess is too low.')
        if user_answer > random_number: print('Your guess is too high')
        if user_answer == random_number: print(f'Good job, {name}! You guessed my number in {guesses_count} guesses!\n')

guess_the_number()
-------------------------------------------
14)
from function_13 import guess_the_number

guess_the_number()
